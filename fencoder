#!/bin/bash
set -e

## Operational variables
COMMAND=$0
RECURSIVE="false"
ANALYZE="false"
OVERWRITE="false"
DEPENDENCIES=("jq")

SUPPORTED_FILES="mkv mp4"

## FFmpeg variables
FFMPEG_COMMAND="ffmpeg"
FFMPEG_DEFAULTS="-n -hide_banner -map_metadata 0 -map_chapters 0"

FFMPEG_H264_CODEC="libx264"
FFMPEG_H264_OPTIONS="-preset veryslow -tune film -fast-pskip 0 -partitions p8x8 -deblock -2:-2"
FFMPEG_H264_PARAMS="ref=5:bframes=5:output-depth=10:lookahead_threads=8"
FFMPEG_H264_CRF=22

FFMPEG_H265_CODEC="libx265"
FFMPEG_H265_OPTIONS="-pix_fmt yuv420p10le -profile:v main10 -preset slower"
FFMPEG_H265_PARAMS="qcomp=0.7:psy-rdoq=5:psy-rd=3"
FFMPEG_H265_CRF=23

## Prints help text.
help() {
	echo "fencoder - FFmpeg wrapper for automatically encoding video files"
	echo
	echo "Usage: $FENCODER_COMMAND [FILES] [OPTIONS]"
	echo
	echo "Options:"
	echo "   -a --analyze    Only analyze the video files, don't encode"
	echo "   -r --recursive  Look in subdirectories for video files"
	echo "      --overwrite  Overwrite existing analysis files"
}

# Checks that we have access to all required tools.
check_dependencies() {
	set +e
	for dep in "${DEPENDENCIES[@]}"; do
		which $dep >/dev/null
		if [ $? -ne 0 ]; then
			echo "ERROR: dependency not installed: $dep"
			exit 1
		fi
	done
	set -e
}

## Checks the initial provided file list to make sure we can find all the files,
## and make sure all given files are supported.
check_input_files() {
	for file in "${input_files[@]}"; do
		if [ -f $file ]; then
			ext="${file##*.}"
			if [[ $SUPPORTED_FILES != *"$ext"* ]]; then
				echo "ERROR: unsupported video file: $file"
				exit 1
			fi
		elif [ -d $file ]; then
			if [ "$RECURSIVE" == "false" ]; then
				echo "ERROR: input is a directory: $file"
				echo "Use -r to scan recursively"
				exit 1
			fi
		else
			echo "ERROR: file not found: $file"
			exit 1
		fi
	done
}

## Recursively expands out any directories we were given.
expand_dirs() {
	for file in $@; do
		ext="${file##*.}"
		if [ -f $file ]; then
			if [[ $SUPPORTED_FILES == *"$ext"* ]]; then
				files+=($file)
			fi
		elif [ -d $file ]; then
			if [ "$(basename "$file")" != "fencoder" ]; then
				expand_dirs $file/*
			fi
		else
			echo "ERROR: file not found: $file"
			exit 1
		fi
	done
}

## Processes file through FFmpeg to gather all information about the given video
## file, and create a .env file with all the things we found.
analyze() {
	echo "Analyzing $1..."
	local output=""

	local file=$(basename "$1")
	local parentdir="$(dirname "$1")"
	local fenc_dir=${parentdir}/fencoder
	local env_file=${fenc_dir}/"${file%.*}".env

	mkdir -p $fenc_dir

	# Check if we've already analyzed
	if [ -f $env_file ]; then
		if [ "$OVERWRITE" == "false" ]; then
			echo "    File already analyzed"
		else
			rm $env_file
		fi
	fi

	# Add tracks
	output+=$(printf "# Tracks\n")
}

encode() {
	echo "Encoding $1..."
}

main() {
	declare -a input_files

	check_dependencies

	# Parse CLI options
	for opt in $@ ; do
		if [[ $opt =~ ^-.* ]]; then
			case $opt in
				"-a" | "--analyze")
					ANALYZE="true"
					;;
				"-r" | "--recursive")
					RECURSIVE="true"
					;;
				"--overwrite")
					OVERWRITE="true"
					;;
				"-h" | "--help")
					help
					exit
					;;
				*)
					echo "ERROR: unknown option: $opt"
					exit 1
					;;
			esac
		else
			input_files+=($opt)
		fi
	done

	if [ ${#input_files[@]} -eq 0 ]; then
		echo "ERROR: no input files given"
		exit 1
	fi

	# Initial check of provided files
	check_input_files

	# Expand out directories
	declare -a files
	expand_dirs "${input_files[@]}"

	# Analyze each file
	for file in "${files[@]}"; do
		analyze $file
	done
	if [ "$ANALYZE" == "true" ]; then
		exit
	fi

	# Encode each file
	for file in "${files[@]}"; do
		encode $file
	done
}

main "$@"
